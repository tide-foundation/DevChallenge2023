@startuml H4x2_Challenge
title H4X Challenge 1
!include https://raw.githubusercontent.com/bschwarz/puml-themes/master/themes/aws-orange-light/puml-theme-aws-orange-light.puml

actor Consumer as "User"
participant "WWW" as hOrk
participant "Node" as mORKx

== Set up password ==

Consumer->hOrk: 
activate hOrk
activate Consumer

hOrk-->Consumer
deactivate hOrk

note over Consumer
    password = GeneratePassword()
    r1 = random
    //<color orange>Hash and convert password to EC point</color>//
    gPass = **hash2Point(password)**
    //<color orange>"Hide" the points with a random"</color>//
    gBlurPass = **gPass ⋅ r**
    exposedFlag = False
end note

Consumer->mORKx: Setup(gBlurPass,exposedFlag)
activate mORKx

note over mORKx
    PRISMi = random
    //<color orange>Apply the PRF on the hidden point</color>//
    gBlurPassPRISMi = **gBlurPass ⋅ PRISMi**
    StoreLocally(PRISMi,exposedFlag)
end note 

mORKx-->Consumer: gBlurPassPRISM1i
deactivate mORKx

note over Consumer
    gPassPRISM = **gBlurPassPRISM1i ⋅ modInv(r1)** //<color orange>( gPass ⋅ PRISM )</color>//
    PRISMKey = hash( gPassPRISM )
    encMsg = aesEnc_PRISMKey( "Congrats! Your prize is xxxxxxxx" )
end note

Consumer->hOrk: StoreMsgs(encMsg)
activate hOrk
note over hOrk: StoreLocally(encMsg)
hOrk-->Consumer: Ack
deactivate hOrk
deactivate Consumer

== Test password ==

group Precondition
note over Consumer
    password : Attempted password
end note 

note over hOrk
    encMsg : Encrypted Prize
end note 

note over mORKx
    PRISMi : PRISM shard //<color orange>Calculated at sign up</color>//
    exposedFlag : Boolean configuration setting
end note

end

Consumer->hOrk
activate hOrk
activate Consumer

hOrk-->Consumer: encMsg
deactivate hOrk

note over Consumer
    r1 = random
    //<color orange>Hash and convert password to EC point</color>//
    gPass = **hash2Point(password)**
    //<color orange>"Hide" the point</color>//
    gBlurPass = **gPass ⋅ r1**
end note

Consumer->mORKx: Convert(gBlurPass)
activate mORKx

note over mORKx
    //<color orange>verify safe point</color>//
    IsSafePoint = **testSafePoint( gBlurPass )**
    //<color orange>Test if IP needs to be throttled</color>//
    IsIPThrottled = Throttle(UserHostAddress)
end note 

alt \nIsSafePoint == True \nand\nisIpThrottled == False ?\n
    note over mORKx
        //<color orange>Apply the PRF on the hidden point</color>//
        gBlurPassPRISMi = **gBlurPass ⋅ PRISMi**
    end note
else \nIsSafePoint == False \nor\nisIpThrottled == True ?\n
    note over mORKx
        //<color orange>Send pseudorandom response</color>//
        gBlurPassPRISMi = **gBlurPass ⋅ H(PRISMi)**
    end note
end

alt \nexposedFlag == True ?\n
    note over mORKx
        //<color orange>if server exposed, send secret PRISM</color>//
        info = PRISMi
    end note
else
    note over mORKx
        info = null
    end note
end

mORKx-->Consumer: gBlurPassPRISMi , info
deactivate mORKx

note over Consumer
    gPassPRISM = **gBlurPassPRISMi ⋅ modInv(r1)** //<color orange>( gPass ⋅ PRISM )</color>//
    PRISMKey = hash( gPassPRISM )
    Prize = aesDec_PRISMKey( encMsg )
    if Prize.decryptionSuccessful then Display( Prize )
    Example = aesDec_PRISMKey( encMsg2 )
    if Example.decryptionSuccessful then Display( Example )
    if info != null then Display( info )
end note

@enduml